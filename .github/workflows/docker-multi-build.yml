name: Build, Push, and Secure Multiple Docker Images to GHCR

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Weekly cleanup of old images
    - cron: "0 0 * * 0"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  PLATFORMS: linux/amd64,linux/arm64
  # Retention days for untagged images
  IMAGE_RETENTION_DAYS: 30
  KEEP_RECENT_VERSIONS: 5 # Keep the 5 most recent tagged versions

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Let all matrix jobs complete
      matrix:
        image_config:
          - name: "devcontainer"
            dockerfile: ".devcontainer/Dockerfile"
            context: ".devcontainer"

          - name: "db"
            dockerfile: "app/db/Dockerfile"
            context: "app/db"

          - name: "backend"
            dockerfile: "app/backend/Dockerfile"
            context: "app/backend"

          - name: "frontend"
            dockerfile: "app/frontend/Dockerfile"
            context: "app/frontend"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ matrix.image_config.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            latest
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image_config.context }}
          file: ${{ matrix.image_config.dockerfile }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Enable build secrets for security
          secrets: |
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DOCKER_HOST=${{ secrets.MYSQL_DOCKER_HOST }}

            DEV_MYSQL_USER=${{ secrets.DEV_MYSQL_USER }}
            DEV_MYSQL_PWD=${{ secrets.DEV_MYSQL_PWD }}
            DEV_MYSQL_DB=${{ secrets.DEV_MYSQL_DB }}

            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
            TEACHER_JWT_SECRET=${{ secrets.TEACHER_JWT_SECRET }}
            STUDENT_JWT_SECRET=${{ secrets.STUDENT_JWT_SECRET }}

            TEST_ADMIN_JWT_SECRET=${{ secrets.TEST_ADMIN_JWT_SECRET }}
            TEST_TEACHER_JWT_SECRET=${{ secrets.TEST_TEACHER_JWT_SECRET }}
            TEST_STUDENT_JWT_SECRET=${{ secrets.TEST_STUDENT_JWT_SECRET }}

            TEST_MYSQL_USER=${{ secrets.TEST_MYSQL_USER }}
            TEST_MYSQL_PWD=${{ secrets.TEST_MYSQL_PWD }}
            TEST_MYSQL_DB=${{ secrets.TEST_MYSQL_DB }}

      # - name: Scan for vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ matrix.image_config.name }}:${{ steps.meta.outputs.version || github.sha }}
      #     format: "table"
      #     exit-code: "1"
      #     ignore-unfixed: true
      #     continue-on-error: true
      #     vuln-type: "os,library"
      #     severity: "CRITICAL,HIGH"

      - name: Install GitHub CLI
        if: github.event_name == 'schedule'
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Set retention policy
        if: github.event_name == 'schedule'
        run: |
          gh auth setup-git
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /orgs/${{ github.repository_owner }}/packages/container/${{ matrix.image_config.name }}/settings \
            -f visibility='private' \
            -f expiration_days=${{ env.IMAGE_RETENTION_DAYS }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: build-and-push
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest

    permissions:
      packages: write
    concurrency:
      group: cleanup-${{ github.ref }}

    steps:
      - name: Cleanup old images
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ env.IMAGE_NAMESPACE }}/${{ matrix.image_config.name }}
          type: container
          keep-n-tagged: ${{ env.KEEP_RECENT_VERSIONS }}
          exclude-tags: dev,main
          older-than: ${{ env.IMAGE_RETENTION_DAYS }} days
          delete-untagged: true
          delete-partial-images: true
          dry-run: true
          log-level: info
